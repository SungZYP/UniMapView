/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../PopupTemplate.js";import{read as s,rasterRendererTypes as r,websceneRasterRendererTypes as i}from"../rasterRenderers.js";import o from"../core/Error.js";import{i as a,u as n,b as l}from"../core/lang.js";import{M as p}from"../chunks/MultiOriginJSONSupport.js";import{eachAlways as m,createAbortError as u,throwIfAbortError as c}from"../core/promiseUtils.js";import{property as h}from"../core/accessorSupport/decorators/property.js";import{I as d}from"../chunks/ensureType.js";import{e as f}from"../chunks/enumeration.js";import{r as y}from"../chunks/reader.js";import{subclass as g}from"../core/accessorSupport/decorators/subclass.js";import x from"./Layer.js";import{B as j}from"../chunks/BlendLayer.js";import{C as b}from"../chunks/CustomParametersMixin.js";import{B as I,i as w,g as v,a as S,b as k,c as T,d as R,I as C}from"../chunks/xmlUtilities.js";import{O as P}from"../chunks/OperationalLayer.js";import{P as M}from"../chunks/PortalLayer.js";import{R as _}from"../chunks/RefreshableLayer.js";import{S as F}from"../chunks/ScaleRangeLayer.js";import{T as O}from"../chunks/TemporalLayer.js";import{b as D}from"../chunks/commonProperties.js";import L from"./support/Field.js";import{i as E}from"../chunks/rasterEnums.js";import"../geometry.js";import U,{R as B}from"./support/RasterInfo.js";import A from"./support/TileInfo.js";import{b as z,g as N,i as H,p as V,a as q,T as G,c as J,e as W,f as $}from"../chunks/RasterSymbolizer.js";import{i as Y,r as X,P as K,G as Q}from"../chunks/utils8.js";import Z from"../rest/support/FeatureSet.js";import ee from"../geometry/SpatialReference.js";import te from"../geometry/Extent.js";import se from"../geometry/Point.js";import{g as re,f as ie,h as oe,j as ae}from"../chunks/pixelUtils.js";import{urlToObject as ne}from"../core/urlUtils.js";import{r as le,T as pe}from"../chunks/TilemapCache.js";import me from"./support/PixelBlock.js";import{createPopupTemplate as ue}from"../support/popupUtils.js";import"../core/Collection.js";import"../chunks/ArrayPool.js";import"../chunks/Evented.js";import"../core/Accessor.js";import"../chunks/deprecate.js";import"../chunks/Logger.js";import"../config.js";import"../chunks/object.js";import"../chunks/string.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/metadata.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../chunks/shared.js";import"../chunks/JSONSupport.js";import"../core/accessorSupport/decorators/cast.js";import"../chunks/writer.js";import"./support/fieldUtils.js";import"../chunks/arcadeOnDemand.js";import"../geometry/Geometry.js";import"../geometry/support/webMercatorUtils.js";import"../chunks/Ellipsoid.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../chunks/jsonMap.js";import"../geometry/support/jsonUtils.js";import"../popup/content.js";import"../popup/content/AttachmentsContent.js";import"../popup/content/Content.js";import"../popup/content/CustomContent.js";import"../popup/content/ExpressionContent.js";import"../popup/ElementExpressionInfo.js";import"../popup/content/FieldsContent.js";import"../popup/FieldInfo.js";import"../popup/support/FieldInfoFormat.js";import"../chunks/date.js";import"../chunks/number.js";import"../chunks/locale.js";import"../popup/content/MediaContent.js";import"../popup/content/BarChartMediaInfo.js";import"../chunks/chartMediaInfoUtils.js";import"../chunks/MediaInfo.js";import"../popup/content/support/ChartMediaInfoValue.js";import"../popup/content/support/ChartMediaInfoValueSeries.js";import"../popup/content/ColumnChartMediaInfo.js";import"../popup/content/ImageMediaInfo.js";import"../popup/content/support/ImageMediaInfoValue.js";import"../popup/content/LineChartMediaInfo.js";import"../popup/content/PieChartMediaInfo.js";import"../popup/content/TextContent.js";import"../popup/ExpressionInfo.js";import"../popup/LayerOptions.js";import"../popup/RelatedRecordsInfo.js";import"../popup/support/RelatedRecordsInfoFieldOrder.js";import"../support/actions/ActionBase.js";import"../chunks/Identifiable.js";import"../support/actions/ActionButton.js";import"../support/actions/ActionToggle.js";import"../renderers/ClassBreaksRenderer.js";import"../symbols.js";import"../symbols/CIMSymbol.js";import"../symbols/Symbol.js";import"../Color.js";import"../chunks/colorUtils.js";import"../chunks/mathUtils.js";import"../chunks/common.js";import"../symbols/ExtrudeSymbol3DLayer.js";import"../symbols/Symbol3DLayer.js";import"../chunks/utils3.js";import"../symbols/edges/Edges3D.js";import"../chunks/screenUtils.js";import"../chunks/materialUtils.js";import"../chunks/opacityUtils.js";import"../symbols/edges/SketchEdges3D.js";import"../symbols/edges/SolidEdges3D.js";import"../chunks/Symbol3DMaterial.js";import"../symbols/FillSymbol.js";import"../symbols/SimpleLineSymbol.js";import"../symbols/LineSymbol.js";import"../symbols/LineSymbolMarker.js";import"../chunks/lineMarkers.js";import"../symbols/FillSymbol3DLayer.js";import"../symbols/patterns/LineStylePattern3D.js";import"../symbols/patterns/StylePattern3D.js";import"../chunks/utils4.js";import"../chunks/colors.js";import"../chunks/symbolLayerUtils3D.js";import"../chunks/aaBoundingBox.js";import"../chunks/aaBoundingRect.js";import"../symbols/Font.js";import"../symbols/IconSymbol3DLayer.js";import"../chunks/persistableUrlUtils.js";import"../symbols/LabelSymbol3D.js";import"../symbols/Symbol3D.js";import"../chunks/collectionUtils.js";import"../portal/Portal.js";import"../kernel.js";import"../request.js";import"../chunks/Loadable.js";import"../chunks/Promise.js";import"../portal/PortalQueryParams.js";import"../portal/PortalQueryResult.js";import"../portal/PortalUser.js";import"../portal/PortalFolder.js";import"../portal/PortalGroup.js";import"../symbols/LineSymbol3DLayer.js";import"../symbols/LineStyleMarker3D.js";import"../chunks/Clonable.js";import"../symbols/ObjectSymbol3DLayer.js";import"../symbols/PathSymbol3DLayer.js";import"../symbols/TextSymbol3DLayer.js";import"../symbols/WaterSymbol3DLayer.js";import"../chunks/Thumbnail.js";import"../chunks/Symbol3DVerticalOffset.js";import"../symbols/callouts/Callout3D.js";import"../symbols/callouts/LineCallout3D.js";import"../symbols/LineSymbol3D.js";import"../symbols/MarkerSymbol.js";import"../symbols/MeshSymbol3D.js";import"../symbols/PictureFillSymbol.js";import"../chunks/urlUtils.js";import"../symbols/PictureMarkerSymbol.js";import"../symbols/PointSymbol3D.js";import"../symbols/PolygonSymbol3D.js";import"../symbols/SimpleFillSymbol.js";import"../symbols/SimpleMarkerSymbol.js";import"../symbols/TextSymbol.js";import"../symbols/WebStyleSymbol.js";import"../renderers/Renderer.js";import"../renderers/support/AuthoringInfo.js";import"../renderers/support/AuthoringInfoVisualVariable.js";import"../chunks/colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"../chunks/VisualVariablesMixin.js";import"../renderers/visualVariables/ColorVariable.js";import"../renderers/visualVariables/VisualVariable.js";import"../chunks/LegendOptions.js";import"../renderers/visualVariables/support/ColorStop.js";import"../renderers/visualVariables/OpacityVariable.js";import"../renderers/visualVariables/support/OpacityStop.js";import"../renderers/visualVariables/RotationVariable.js";import"../renderers/visualVariables/SizeVariable.js";import"../renderers/visualVariables/support/SizeStop.js";import"../chunks/sizeVariableUtils.js";import"../chunks/visualVariableUtils.js";import"../Graphic.js";import"../chunks/compilerUtils.js";import"../chunks/lengthUtils.js";import"../chunks/unitUtils.js";import"../chunks/projectionEllipsoid.js";import"../renderers/support/ClassBreakInfo.js";import"../chunks/commonProperties2.js";import"../symbols/support/jsonUtils.js";import"../chunks/symbolConversion.js";import"../renderers/FlowRenderer.js";import"../renderers/RasterColormapRenderer.js";import"../renderers/support/ColormapInfo.js";import"../chunks/colorRampUtils.js";import"../chunks/colorUtils2.js";import"../renderers/RasterShadedReliefRenderer.js";import"../renderers/RasterStretchRenderer.js";import"../renderers/UniqueValueRenderer.js";import"../chunks/diffUtils.js";import"../renderers/support/UniqueValueInfo.js";import"../chunks/styleUtils.js";import"../renderers/VectorFieldRenderer.js";import"../geometry/support/normalizeUtils.js";import"../chunks/normalizeUtilsCommon.js";import"../chunks/vectorFieldUtils.js";import"../chunks/utils6.js";import"../chunks/asyncUtils.js";import"../chunks/jsonUtils.js";import"../chunks/parser.js";import"../chunks/mat4f32.js";import"../chunks/mat4.js";import"../chunks/_commonjsHelpers.js";import"../chunks/assets.js";import"../chunks/ItemCache.js";import"../chunks/MemCache.js";import"../symbols/support/cimSymbolUtils.js";import"../chunks/utils7.js";import"../core/accessorSupport/decorators/aliasOf.js";import"../chunks/arcgisLayerUrl.js";import"./support/DimensionalDefinition.js";import"../chunks/RasterJobHandler.js";import"../core/workers/workers.js";import"../core/workers/Connection.js";import"../core/workers/RemoteClient.js";import"../intl.js";import"../chunks/messages.js";import"../chunks/rasterRendererHelper.js";import"../chunks/generateRendererUtils.js";import"../chunks/dataUtils.js";import"../chunks/RawBlockCache.js";import"../chunks/rasterProjectionHelper.js";import"../chunks/pe.js";import"../geometry/projection.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"../chunks/zscale.js";import"../portal/PortalItem.js";import"../portal/PortalItemResource.js";import"../portal/PortalRating.js";import"../TimeExtent.js";import"../chunks/timeUtils.js";import"../TimeInterval.js";import"./support/TimeInfo.js";import"../support/timeUtils.js";import"../chunks/ElevationInfo.js";import"../chunks/unitConversionUtils.js";import"../chunks/domains.js";import"./support/CodedValueDomain.js";import"./support/Domain.js";import"./support/InheritedDomain.js";import"./support/RangeDomain.js";import"../chunks/fieldType.js";import"./support/LOD.js";import"../chunks/byteSizeEstimations.js";import"../core/HandleOwner.js";import"../core/Handles.js";import"../core/reactiveUtils.js";import"../chunks/LRUCache.js";const ce=new Map;ce.set("int16","esriFieldTypeSmallInteger"),ce.set("int32","esriFieldTypeInteger"),ce.set("int64","esriFieldTypeInteger"),ce.set("float32","esriFieldTypeSingle"),ce.set("float64","esriFieldTypeDouble"),ce.set("text","esriFieldTypeString");let he=class extends I{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(t))throw new o("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:s,rasterInfo:r}=this._parseHeader(t);if("thematic"===r.dataType){const e=await this._fetchAuxiliaryInformation();r.attributeTable=e}this._set("storageInfo",s),this._set("rasterInfo",r),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,s,r={}){const i=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(i<0)return null;const o=this._buildCacheFilePath(i,t,s,r.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,s),n=await this.request(o,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:r.signal});if(!n)return null;const l=new Uint8Array(n.data),p=this._getTileEndAndContentType(l,a);if(0===p.recordSize)return null;const m=await this.request(o,{range:{from:p.position,to:p.position+p.recordSize},responseType:"array-buffer",signal:r.signal});return m?this.decodePixelBlock(m.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){var t,s;const r=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:o,colormap:a,blockWidth:n,blockHeight:l,firstPyramidLevel:p,maximumPyramidLevel:m}=e,u=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),c=e.extent.spatialReference,h=null==(t=e.geodataXform)?void 0:t.spatialReference,d=new ee(null!=c&&c.wkid||null!=c&&c.wkt?c:h);let f=new te({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:d});const y=new se({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:d}),g=Math.round((f.xmax-f.xmin)/y.x),x=Math.round((f.ymax-f.ymin)/y.y),j=this._parseTransform(e.geodataXform),b=j?f:null;j&&(f=j.forwardTransform(f),y.x=(f.xmax-f.xmin)/g,y.y=(f.ymax-f.ymin)/x);const I=null!=(s=e.properties)?s:{},w=e.format.toLowerCase().replace("cache/",""),v=new se(e.origin.x,e.origin.y,d);let S,k,T,R;if(a&&a.colors)for(S=[],k=0;k<a.colors.length;k++)T=a.colors[k],R=a.values?a.values[k]:k,S.push([R,255&T,T<<16>>>24,T<<8>>>24,T>>>24]);const C=e.LODInfos,P=[];for(k=0;k<C.levels.length;k++)P.push({level:C.levels[k],resolution:C.resolutions[k],scale:96/.0254*C.resolutions[k]});const M=new A({dpi:96,lods:P,format:w,origin:v,size:[n,l],spatialReference:d}),_={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},F=[{maxCol:Math.ceil(g/n)-1,maxRow:Math.ceil(x/l)-1,minCol:0,minRow:0}];let O=2;if(m>0)for(k=0;k<m;k++)F.push({maxCol:Math.ceil(g/O/n)-1,maxRow:Math.ceil(x/O/l)-1,minCol:0,minRow:0}),O*=2;const D=e.mdInfo;return{storageInfo:_,rasterInfo:new U({width:g,height:x,pixelType:r,bandCount:i,extent:f,nativeExtent:b,transform:j,spatialReference:d,pixelSize:y,keyProperties:I,statistics:u,histograms:o,multidimensionalInfo:D,colormap:S,storageInfo:new B({blockWidth:n,blockHeight:l,pyramidBlockWidth:n,pyramidBlockHeight:l,origin:v,tileInfo:M,firstPyramidLevel:p,maximumPyramidLevel:m,blockBoundary:F})})}}_parseTransform(e){var t,s;if(!Y(e))throw new o("cloudraster:open","the data contains unsupported geodata transform types");const r=X(e);if("identity"===r.type)return null;if("polynomial"!==r.type||null==(t=r.forwardCoefficients)||!t.length||null==(s=r.inverseCoefficients)||!s.length)throw new o("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return r}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),s=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),r=await Promise.all([t,s]);let i;if(r[0]){let e=r[0].fields;const t=r[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":ce.get(e.type),name:e.name,alias:e.alias||e.name})));const s=t.map((e=>({attributes:e})));e&&t&&(i={fields:e,features:s})}}if(!i&&r[1]){i=class{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),s=3&t.getUint8(0);if(3!==s)return{header:{version:s},recordSet:null};const r=t.getUint32(4,!0),i=t.getUint16(8,!0),o=t.getUint16(10,!0),a={version:s,recordCount:r,headerByteCount:i,recordByteCount:o};let n=32;const l=[],p=[];let m;if(3===s){for(;13!==t.getUint8(n);)m=String.fromCharCode(t.getUint8(n+11)).trim(),l.push({name:z(new Uint8Array(e,n,11)),type:m,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(m)],length:t.getUint8(n+16)}),n+=32;if(n+=1,l.length>0)for(;p.length<r&&e.byteLength-n>o;){const s=[];32===t.getUint8(n)?(n+=1,l.forEach((t=>{if("C"===t.type)s.push(z(new Uint8Array(e,n,t.length)).trim());else if("N"===t.type)s.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim(),10));else if("F"===t.type)s.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim()));else if("D"===t.type){const r=String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim();s.push(new Date(parseInt(r.substring(0,4),10),parseInt(r.substring(4,6),10)-1,parseInt(r.substring(6,8),10)))}n+=t.length})),p.push(s)):n+=o}}const u=function(e){const t=e.fields,s=e.records,r=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),o=i.map((e=>e.name)),a=[];let n=0,l=0;return s.forEach((e=>{const t={};for(t[r]=n++,l=1;l<o.length;l++)t[o[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:i,features:a}}({fields:l,records:p});return{header:a,fields:l,records:p,recordSet:u}}}.parse(r[1]).recordSet}return Z.fromJSON(i)}_buildCacheFilePath(e,t,s,r){const i=this.storageInfo.packetSize,o=Math.floor(t/i)*i,n=Math.floor(s/i)*i,l="R"+this._toHexString4(o)+"C"+this._toHexString4(n);let p="L";p+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:m}=this.rasterInfo,u=null==r?void 0:r[0];if(!a(m)||!u)return`${this.url}/_alllayers/${p}/${l}.bundle`;let c=m.variables.find((e=>e.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const h=4-c.length;for(let e=0;e<h;e++)c="0"+c;return c="S"+c,`${this.url}/_alllayers/${u.variableName}/${c}/${p}/${l}.bundle`}_getIndexRecordFromBundle(e,t){const s=this.storageInfo.packetSize,r=s*(e%s)+t%s;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const s=e.subarray(t,t+8);let r,i=0;for(r=0;r<5;r++)i|=(255&s[r])<<8*r;const o=0xffffffffff&i;for(i=0,r=5;r<8;r++)i|=(255&s[r])<<8*(r-5);return{position:o,recordSize:0xffffffffff&i}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};e([h({readOnly:!0})],he.prototype,"storageInfo",void 0),e([h({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),he=e([g("esri.layers.support.rasterDatasets.CloudRaster")],he);const de=he;let fe=class extends I{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){var t;await this.init();const{pixelBlock:s,statistics:r,histograms:i,name:o,keyProperties:a,nativeExtent:n,transform:l}=this.data,{width:p,height:m,pixelType:u}=s,c=this.data.extent||new te({xmin:-.5,ymin:.5,xmax:p-.5,ymax:m-.5,spatialReference:new ee({wkid:3857})}),h=null!=(t=this.data.isPseudoSpatialReference)?t:!this.data.extent,d={x:c.width/p,y:c.height/m},f=new U({width:p,height:m,pixelType:u,extent:c,nativeExtent:n,transform:l,pixelSize:d,spatialReference:c.spatialReference,bandCount:3,keyProperties:a||{},statistics:r,isPseudoSpatialReference:h,histograms:i});this.createRemoteDatasetStorageInfo(f,512,512),this._set("rasterInfo",f),this.updateTileInfo(),await this._buildInMemoryRaster(s,{width:512,height:512},e),this.datasetName=o,this.url="/InMemory/"+o}fetchRawTile(e,t,s,r={}){const i=this._pixelBlockTiles.get(`${e}/${t}/${s}`);return Promise.resolve(i)}async _buildInMemoryRaster(e,t,s){const r=this.rasterInfo.storageInfo.maximumPyramidLevel,i=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:r},s):Promise.resolve(re(e,t,r)),n=a(this.rasterInfo.statistics),l=a(this.rasterInfo.histograms),p=n&&l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},s):Promise.resolve(ie(e)),u=await m([i,p]);if(!u[0].value&&u[1].value)throw new o("inmemory-raster:open","failed to build in memory raster");var c,h;(this._pixelBlockTiles=u[0].value,n)||(this.rasterInfo.statistics=null==(c=u[1].value)?void 0:c.statistics);l&&(this.rasterInfo.histograms=null==(h=u[1].value)?void 0:h.histograms)}};e([h({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),e([h()],fe.prototype,"data",void 0),fe=e([g("esri.layers.support.rasterDatasets.InMemoryRaster")],fe);const ye=fe;function ge(e,t){if(!e||!t)return null;const s=[];for(let r=0;r<e.length;r++)s.push(e[r]),s.push(t[r]);return s}function xe(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new ee({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const s=e.indexOf("VERTCS"),r=e.indexOf("PROJCS"),i=r>-1?r:e.indexOf("GEOGCS");if(-1===i)return null;const o=e.slice(i,e.lastIndexOf("]",s)+1).trim(),a=e.slice(s,e.lastIndexOf("]")).trim();t=je(o);const n=new ee(t?{wkid:t}:{wkt:o}),l=je(a);return l&&(n.vcsWkid=l),n}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=je(e),new ee(0!==t?{wkid:t}:{wkt:e})):null}function je(e){var t;const s=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),r=s[s.length-1].split(","),i=null==(t=r[0])?void 0:t.toLowerCase();if(("epsg"===i||"esri"===i)&&e.endsWith('"]]')){const e=Number(r[1]);if(!isNaN(e)&&0!==e)return e}return 0}function be(e){var t;if("pamdataset"!==(null==e||null==(t=e.documentElement.tagName)?void 0:t.toLowerCase()))return{};const s={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(w(e,"SRS")){if(!s.spatialReference){const t=v(e);s.spatialReference=xe(t)}}else if(w(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:r}=function(e){var t;const s=k(e,"GeodataXform"),r=xe(T(s,"SpatialReference/WKID")||v(s,"SpatialReference/WKT"));if("typens:PolynomialXform"!==s.getAttribute("xsi:type"))return{spatialReference:r,transform:null};const i=null!=(t=T(s,"PolynomialOrder"))?t:1,o=R(s,"CoeffX/Double"),a=R(s,"CoeffY/Double"),n=R(s,"InverseCoeffX/Double"),l=R(s,"InverseCoeffY/Double"),p=ge(o,a),m=ge(n,l);return{spatialReference:r,transform:new K({spatialReference:r,polynomialOrder:i,forwardCoefficients:p,inverseCoefficients:m})}}(e);s.transform=r,s.spatialReference||(s.spatialReference=t)}else{S(e,"MDI").forEach((e=>s.metadata[e.getAttribute("key")]=v(e)))}else if(w(e,"PAMRasterBand")){const t=function(e){var t;const s=T(e,"NoDataValue"),r=k(e,"Histograms/HistItem"),i=T(r,"HistMin"),o=T(r,"HistMax"),a=T(r,"BucketCount"),n=null==(t=v(r,"HistCounts"))?void 0:t.split("|").map((e=>Number(e)));let l,p,m,u;S(e,"Metadata/MDI").forEach((e=>{var t;const s=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=s;break;case"STATISTICS_MAXIMUM":p=s;break;case"STATISTICS_MEAN":m=s;break;case"STATISTICS_STDDEV":u=s}}));const c=T(e,"Metadata/SourceBandIndex");return{noDataValue:s,histogram:null!=n&&n.length&&null!=l&&null!=p?{min:i,max:o,size:a||n.length,counts:n}:null,sourceBandIndex:c,statistics:null!=l&&null!=p?{min:l,max:p,avg:m,stddev:u}:null}}(e);null!=t.sourceBandIndex&&null==s.rasterBands[t.sourceBandIndex]?s.rasterBands[t.sourceBandIndex]=t:s.rasterBands.push(t)}}));const r=s.rasterBands;if(r){const e=!!r[0].statistics;s.statistics=e?r.map((e=>e.statistics)):null;const t=!!r[0].histogram;s.histograms=t?r.map((e=>e.histogram)):null}return s}let Ie=class extends I{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:s,statistics:r,histograms:i,transform:o}=await this._fetchAuxiliaryData(e);const a=!s;a&&(s=new ee({wkid:3857})),null!=i&&i.length&&null==r&&(r=oe(i));const{width:n,height:l}=t;let p=new te({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:s});const m=o?o.forwardTransform(p):p;let u=!0;if(o){const e=o.forwardCoefficients;u=e&&0===e[1]&&0===e[2],u&&(o=null,p=m)}const c=new ye({data:{extent:m,nativeExtent:p,transform:o,pixelBlock:t,statistics:r,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await c.open(),this._set("rasterInfo",c.rasterInfo),this._inMemoryRaster=c}fetchRawTile(e,t,s,r={}){return this._inMemoryRaster.fetchRawTile(e,t,s,r)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:null==e?void 0:e.signal}),s=N(t).toUpperCase();if("JPG"!==s&&"PNG"!==s&&"GIF"!==s&&"BMP"!==s)throw new o("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);return await this.decodePixelBlock(t,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(e){var t,s;const r=n(null==e?void 0:e.signal),i=null!=(t=this.ioConfig.skipExtensions)?t:[],o=i.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:r}),a=this.datasetFormat,l="JPG"===a?"jgw":"PNG"===a?"pgw":"BMP"===a?"bpw":null,p=i.indexOf(l)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+l,{responseType:"text",signal:r}),c=await m([o,p]);if(null!=r&&r.aborted)throw u();const h=be(null==(s=c[0].value)?void 0:s.data);if(!h.transform){const e=c[1].value?c[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;h.transform=6===(null==e?void 0:e.length)?new K({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return h}};e([h({type:String,json:{write:!0}})],Ie.prototype,"datasetFormat",void 0),Ie=e([g("esri.layers.support.rasterDatasets.ImageAuxRaster")],Ie);const we=Ie;let ve=class extends I{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const r=s.data;if(this.sourceJSON=r,!r)throw new o("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!r.tileInfo)throw new o("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=r.cacheType,null==this.tileType&&(i.indexOf(r.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===r.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=r.name.slice(r.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:t});if(!a(n))throw new o("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?le(r.tileInfo,r):A.fromJSON(r.tileInfo),{extent:t,pixelSize:s}=n,i=.5/n.width*s.x;let o,a;const l=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==r.maxScale&&("Raster"===this.tileType?(o=e.lods.find((e=>e.resolution===s.x)),o||(o=e.lods[e.lods.length-1])):(o=e.lods.find((e=>Math.abs(e.scale-r.maxScale)<i)),o||(o=e.lods.filter((e=>e.scale>r.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),s.x=s.y=o.resolution,n.width=Math.ceil((t.xmax-t.xmin)/s.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/s.y-.1)),o||(o=l);const p=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==r.minScale&&"Elevation"===this.tileType&&(a=e.lods.find((e=>Math.abs(e.scale-r.minScale)<i)),this._levelOffset=a.level-p.level),a||(a=p);const m=Math.max(s.x,s.y);(Math.abs(s.x-s.y)>i||!e.lods.some((e=>Math.abs(e.resolution-m)<i)))&&(s.x=s.y=o.resolution,n.width=Math.ceil((t.xmax-t.xmin)/s.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/s.y-.1));const u=o.level-a.level,[c,h]=e.size,d=[];e.lods.forEach((e=>{e.level>=a.level&&e.level<=o.level&&d.push({x:e.resolution,y:e.resolution})})),d.sort(((e,t)=>e.x-t.x));const f=this.computeBlockBoundary(t,c,h,e.origin,d,u),y=d.length>1?d.slice(1):null;n.storageInfo=new B({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:y,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:u,tileInfo:e,blockBoundary:f}),this._fixGCSShift(n),this._set("rasterInfo",n)}if(r.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:n.storageInfo.tileInfo,parsedUrl:ne(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new pe({layer:e})}}async fetchRawTile(e,t,s,r={}){if(this._slices&&null==r.sliceId)return null;const{storageInfo:i,extent:o}=this.rasterInfo,a=i.maximumPyramidLevel-e+this._levelOffset,n=`${this.url}/tile/${a}/${t}/${s}`,l=this._slices?{sliceId:r.sliceId||0}:null,{data:p}=await this.request(n,{query:l,responseType:"array-buffer",signal:r.signal});if(!p)return null;const m=await this.decodePixelBlock(p,{width:i.tileInfo.size[0],height:i.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),u=i.blockBoundary[e];if("jpg"!==i.compression||s>u.minCol&&s<u.maxCol&&t>u.minRow&&t<u.maxRow)return m;const{origin:c,blockWidth:h,blockHeight:d}=i,{x:f,y}=this.getPyramidPixelSize(e),g=Math.round((o.xmin-c.x)/f)%h,x=Math.round((o.xmax-c.x)/f)%h||h,j=Math.round((c.y-o.ymax)/y)%d,b=Math.round((c.y-o.ymin)/y)%d||d,I=s===u.minCol?g:0,w=t===u.minRow?j:0,v=s===u.maxCol?x:h,S=t===u.maxRow?b:d;return ae(m,{x:I,y:w},{width:v-I,height:S-w}),m}getSliceIndex(e){if(!this._slices||l(e)||0===e.length)return null;const t=e;for(let e=0;e<this._slices.length;e++){const s=this._slices[e].multidimensionalDefinition;if(s.length===t.length&&!s.some((e=>{const s=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));if(!s)return!0;return(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const s=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),r=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),i=await Promise.all([s,r]);return i[0]&&i[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(e,0,n(t.datumTransformation));if(null===s)return null;let r=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let o=i-r+this._levelOffset;const a=s.srcLocation;for(;o>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(o,s.row,s.col,t))break}catch{}if(o--,r++,s=this.identifyPixelLocation(a,r,n(t.datumTransformation)),null===s)return null}return-1===o||null==s?null:r}async _fetchRasterInfo(e){const t=this.sourceJSON,s=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),r=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),i=ee.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new U({width:s,height:r,bandCount:3,extent:te.fromJSON(t.extent),spatialReference:i,pixelSize:new se({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:i}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:o,signal:a}=e,n=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:o,f:"json"},signal:a}).then((e=>Z.fromJSON(e.data))).catch((()=>null)),l=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:o,f:"json"},signal:a}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),p=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:o,f:"json"},signal:a}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),m=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:a}).then((e=>e.data)).catch((()=>{})),u=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),c=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:a}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return Promise.all([n,l,p,m,u,c]).then((e=>{let o=null;if(t.minValues&&t.minValues.length===t.bandCount){o=[];for(let e=0;e<t.minValues.length;e++)o.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}return this._slices=e[5]||null,new U({width:s,height:r,bandCount:t.bandCount,extent:te.fromJSON(t.extent),spatialReference:i,pixelSize:new se({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:i}),pixelType:t.pixelType.toLowerCase(),statistics:o,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const s=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=s.variables)&&t.length&&s.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),s}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:s}=e;0===t.xmin&&360===t.xmax&&s.wkid&&s.isGeographic&&(e.nativeExtent=e.extent,e.transform=new Q,e.extent=e.transform.forwardTransform(t))}};e([h({type:String,json:{write:!0}})],ve.prototype,"datasetFormat",void 0),e([h()],ve.prototype,"tileType",void 0),ve=e([g("esri.layers.support.rasterDatasets.ImageServerRaster")],ve);const Se=ve,ke=new Map;ke.set("Int8","s8"),ke.set("UInt8","u8"),ke.set("Int16","s16"),ke.set("UInt16","u16"),ke.set("Int32","s32"),ke.set("UInt32","u32"),ke.set("Float32","f32"),ke.set("Float64","f32"),ke.set("Double64","f32");const Te=new Map;Te.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Te.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Te.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Te.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Re=class extends I{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var t;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const s=e?n(e.signal):null,r=await this.request(this.url,{responseType:"xml",signal:s}),{rasterInfo:i,files:o}=this._parseHeader(r.data);if(-1===(null==(t=this.ioConfig.skipExtensions)?void 0:t.indexOf("aux.xml"))){const t=await this._fetchAuxiliaryData(e);var l;if(null!=t)i.statistics=null!=(l=t.statistics)?l:i.statistics,i.histograms=t.histograms,t.histograms&&!a(i.statistics)&&(i.statistics=oe(t.histograms))}this._set("rasterInfo",i),this._files=o;const p=await this.request(o.index,{responseType:"array-buffer",signal:s});this._storageIndex=this._parseIndex(p.data);const{blockWidth:m,blockHeight:u}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:d}=this.rasterInfo,f=[],y=this._getBandSegmentCount();let g=0,x=-1;for(;g<this._storageIndex.length;){x++;const e=Math.ceil(h/m/c**x)-1,t=Math.ceil(d/u/c**x)-1;g+=(e+1)*(t+1)*y*4,f.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,x>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=x),this.updateTileInfo()}async fetchRawTile(e,t,s,r={}){const{blockWidth:i,blockHeight:o,blockBoundary:n}=this.rasterInfo.storageInfo,l=n[e];if(!l||l.maxRow<t||l.maxCol<s||l.minRow>t||l.minCol>s)return null;const{bandCount:p,pixelType:m}=this.rasterInfo,{ranges:u,actualTileWidth:c,actualTileHeight:h}=this._getTileLocation(e,t,s);if(!u||0===u.length)return null;if(0===u[0].from&&0===u[0].to){const e=new Uint8Array(i*o);return new me({width:i,height:o,pixels:null,mask:e,validPixelCount:0})}const{bandIds:d}=this.ioConfig,f=this._getBandSegmentCount(),y=[];let g=0;for(g=0;g<f;g++)(!d||d.indexOf[g]>-1)&&y.push(this.request(this._files.data,{range:{from:u[g].from,to:u[g].to},responseType:"array-buffer",signal:r.signal}));const x=await Promise.all(y),j=x.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),b=new Uint8Array(j);let I=0;for(g=0;g<f;g++)b.set(new Uint8Array(x[g].data),I),I+=x[g].data.byteLength;const w=Te.get(this.rasterInfo.storageInfo.compression).decoderFormat,v=await this.decodePixelBlock(b.buffer,{width:i,height:o,format:w,planes:(null==d?void 0:d.length)||p,pixelType:m});if(a(this.rasterInfo.noDataValue)&&"lerc"!==w&&!v.mask){const e=this.rasterInfo.noDataValue[0];if(null!=e){const t=v.width*v.height,s=new Uint8Array(t);if(Math.abs(e)>1e24)for(g=0;g<t;g++)Math.abs((v.pixels[0][g]-e)/e)>1e-6&&(s[g]=1);else for(g=0;g<t;g++)v.pixels[0][g]!==e&&(s[g]=1);v.mask=s}}let S=0,k=0;if(c!==i||h!==o){let e=v.mask;if(e)for(g=0;g<o;g++)if(k=g*i,g<h)for(S=c;S<i;S++)e[k+S]=0;else for(S=0;S<i;S++)e[k+S]=0;else for(e=new Uint8Array(i*o),v.mask=e,g=0;g<h;g++)for(k=g*i,S=0;S<c;S++)e[k+S]=1}return v}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,s,r,i,o,a;if(H){for(s=new Uint8Array(e),i=new ArrayBuffer(e.byteLength),r=new Uint8Array(i),o=0;o<e.byteLength/4;o++)for(a=0;a<4;a++)r[4*o+a]=s[4*o+3-a];t=new Uint32Array(i)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return Te.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,s){const{blockWidth:r,blockHeight:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let p,m,u,c=0,h=0;for(u=0;u<e;u++)h=o**u,p=Math.ceil(a/r/h),m=Math.ceil(n/i/h),c+=p*m;h=o**e,p=Math.ceil(a/r/h),m=Math.ceil(n/i/h),c+=t*p+s,c*=4*l;const d=this._storageIndex.subarray(c,c+4*l);let f=0,y=0;const g=[];for(let e=0;e<l;e++)f=d[4*e+0]*2**32+d[4*e+1],y=f+d[4*e+2]*2**32+d[4*e+3],g.push({from:f,to:y});return{ranges:g,actualTileWidth:s<p-1?r:Math.ceil(a/h)-r*(p-1),actualTileHeight:t<m-1?i:Math.ceil(n/h)-i*(m-1)}}_parseHeader(e){const t=k(e,"MRF_META/Raster");if(!t)throw new o("mrf:open","not a valid MRF format");const s=k(t,"Size"),r=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),a=parseInt(s.getAttribute("c"),10),n=(v(t,"Compression")||"none").toLowerCase();if(!Te.has(n))throw new o("mrf:open","currently does not support compression "+n);const l=v(t,"DataType")||"UInt8",p=ke.get(l);if(null==p)throw new o("mrf:open","currently does not support pixel type "+l);const m=k(t,"PageSize"),u=parseInt(m.getAttribute("x"),10),c=parseInt(m.getAttribute("y"),10),h=k(t,"DataValues");let d,f;h&&(f=h.getAttribute("NoData"),null!=f&&(d=f.trim().split(" ").map((e=>parseFloat(e)))));if(k(e,"MRF_META/CachedSource"))throw new o("mrf:open","currently does not support MRF referencing other data files");const y=k(e,"MRF_META/GeoTags"),g=k(y,"BoundingBox");let x,j=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),s=parseFloat(g.getAttribute("maxx")),r=parseFloat(g.getAttribute("maxy")),i=v(y,"Projection")||"";let o;if("LOCAL_CS[]"!==i)if(i.toLowerCase().startsWith("epsg:")){const e=Number(i.slice(5));isNaN(e)||0===e||(o=new ee({wkid:e}))}else o=xe(i);else j=!0,o=new ee({wkid:3857});x=new te(e,t,s,r),x.spatialReference=o}else j=!0,x=new te({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:new ee({wkid:3857})});const b=k(e,"MRF_META/Rsets"),I=parseInt(b&&b.getAttribute("scale")||"2",10),w=x.spatialReference,S=new B({origin:new se({x:x.xmin,y:x.ymax,spatialReference:w}),blockWidth:u,blockHeight:c,pyramidBlockWidth:u,pyramidBlockHeight:c,compression:n,pyramidScalingFactor:I}),T=new se({x:x.width/r,y:x.height/i,spatialReference:w}),R=new U({width:r,height:i,extent:x,isPseudoSpatialReference:j,spatialReference:w,bandCount:a,pixelType:p,pixelSize:T,noDataValue:d,storageInfo:S}),C=v(e,"datafile"),P=v(e,"IndexFile");return{rasterInfo:R,files:{mrf:this.url,index:P||this.url.replace(".mrf",".idx"),data:C||this.url.replace(".mrf",Te.get(n).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return be(t)}catch{return null}}};e([h()],Re.prototype,"_files",void 0),e([h()],Re.prototype,"_storageIndex",void 0),e([h({type:String,json:{write:!0}})],Re.prototype,"datasetFormat",void 0),Re=e([g("esri.layers.support.rasterIO.MRFRaster")],Re);const Ce=Re,Pe=function(e,t){const s=e.get(t);return s&&s.values},Me=function(e,t){const s=e.get(t);return s&&s.values[0]};let _e=class extends I{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var t,s,r;await this.init();const i=e?n(e.signal):null,{data:l}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:i});if(!l)throw new o("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:p,firstIFD:m,isBigTiff:u}=V(l),c=[];await this._readIFDs(c,l,p,m,0,u?8:4,i);const h=q(c),{width:d,height:f,tileWidth:y,tileHeight:g,planes:x,pixelType:j,compression:b,firstPyramidLevel:I,maximumPyramidLevel:w,pyramidBlockWidth:v,pyramidBlockHeight:S,tileBoundary:k,affine:T,metadata:R}=h;let C=xe((null==(t=h.extent.spatialReference)?void 0:t.wkt)||(null==(s=h.extent.spatialReference)?void 0:s.wkid)),P=!1;null==C&&(P=!0,C=new ee({wkid:3857}));const M=new te({...h.extent,spatialReference:C}),_=new se(M?{x:M.xmin,y:M.ymax,spatialReference:C}:{x:0,y:0}),F=new B({blockWidth:y,blockHeight:g,pyramidBlockWidth:v,pyramidBlockHeight:S,compression:b,origin:_,firstPyramidLevel:I,maximumPyramidLevel:w,blockBoundary:k}),O=new se({x:(M.xmax-M.xmin)/d,y:(M.ymax-M.ymin)/f,spatialReference:C}),D=R?{BandProperties:R.bandProperties,DataType:R.dataType}:{},L=new U({width:d,height:f,bandCount:x,pixelType:j,compression:b,pixelSize:O,storageInfo:F,spatialReference:C,isPseudoSpatialReference:P,keyProperties:D,extent:M,statistics:R?R.statistics:null});if(null!=T&&T.length&&(L.nativeExtent=new te({xmin:-.5,ymin:.5-f,xmax:d-.5,ymax:.5,spatialReference:C}),L.transform=new K({polynomialOrder:1,forwardCoefficients:[T[2]+T[0]/2,T[5]-T[3]/2,T[0],T[3],-T[1],-T[4]]}),L.extent=L.transform.forwardTransform(L.nativeExtent),L.pixelSize=new se({x:(M.xmax-M.xmin)/d,y:(M.ymax-M.ymin)/f,spatialReference:C}),F.origin.x=-.5,F.origin.y=.5),null==(r=this.ioConfig.skipExtensions)||!r.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){var E;if(L.statistics=null!=(E=t.statistics)?E:L.statistics,L.histograms=t.histograms,t.histograms&&!a(L.statistics)&&(L.statistics=oe(t.histograms)),t.transform&&!T){L.transform=t.transform,L.nativeExtent=L.extent;const e=L.transform.forwardTransform(L.nativeExtent);L.pixelSize=new se({x:(e.xmax-e.xmin)/d,y:(e.ymax-e.ymin)/f,spatialReference:C}),L.extent=e}L.spatialReference||(L.spatialReference=t.spatialReference)}}if(this._set("rasterInfo",L),this._headerInfo={littleEndian:p,isBigTiff:u,ifds:c,...h},!this._headerInfo.isSupported)throw new o("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,s,r={}){var i;if(null==(i=this._headerInfo)||!i.isSupported||this.isBlockOutside(e,t,s))return null;const o=this._getTileLocation(e,t,s);if(!o)return null;const{ranges:a,actualTileWidth:n,actualTileHeight:l,ifd:p}=o,m=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:r.signal}))),u=await Promise.all(m),c=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),h=1===u.length?u[0].data:new ArrayBuffer(c),d=[0],f=[0];if(u.length>1){const e=new Uint8Array(h);for(let t=0,s=0;t<u.length;t++){const r=u[t].data;e.set(new Uint8Array(r),s),d[t]=s,s+=r.byteLength,f[t]=r.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:p,offsets:d,sizes:f},width:y,height:g,planes:null,pixelType:null});let j,b,I;if(n!==y||l!==g){let e=x.mask;if(e)for(j=0;j<g;j++)if(I=j*y,j<l)for(b=n;b<y;b++)e[I+b]=0;else for(b=0;b<y;b++)e[I+b]=0;else for(e=new Uint8Array(y*g),x.mask=e,j=0;j<l;j++)for(I=j*y,b=0;b<n;b++)e[I+b]=1}return x}async _readIFDs(e,t,s,r,i,o=4,a){if(!r)return null;if(r>=t.byteLength||r<0){t=(await this.request(this.url,{range:{from:r+i,to:r+i+this._bufferSize},responseType:"array-buffer",signal:a})).data,i=r+i,r=0}const n=await this._readIFD(t,s,r,i,G.TIFF_TAGS,o,a);if(e.push(n.ifd),!n.nextIFD)return null;await this._readIFDs(e,t,s,n.nextIFD-i,i,o,a)}async _readIFD(e,t,s,r,i=G.TIFF_TAGS,o=4,a){if(!e)return null;const n=J(e,t,s,r,i,o);if(n.success){const s=[];if(n.ifd.forEach((e=>{e.values||s.push(e)})),s.length>0){const i=s.map((e=>e.offlineOffsetSize)),o=Math.min.apply(null,i.map((e=>e[0])));if(Math.min.apply(null,i.map((e=>e[0]+e[1])))-o<=this._bufferSize){const{data:i}=await this.request(this.url,{range:{from:o,to:o+this._bufferSize},responseType:"array-buffer",signal:a});e=i,r=o,s.forEach((s=>W(e,t,s,r)))}}if(n.ifd.has("GEOKEYDIRECTORY")){const s=n.ifd.get("GEOKEYDIRECTORY"),i=s.values;if(i&&i.length>4){const o=i[0]+"."+i[1]+"."+i[2],n=await this._readIFD(e,t,s.valueOffset+6-r,r,G.GEO_KEYS,2,a);s.data=n.ifd,s.data&&s.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[o]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==e.byteLength){const s=await this.request(this.url,{range:{from:r,to:r+n.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=s.data).byteLength<n.requiredBufferSize?null:this._readIFD(e,t,0,r,G.TIFF_TAGS,4,a)}}_getTileLocation(e,t,s){const{firstPyramidLevel:r,blockBoundary:i}=this.rasterInfo.storageInfo,o=0===e?0:e-(r-1),a=this._headerInfo.ifds[o];if(!a)return null;const n=$(a,this._headerInfo),l=Pe(a,"TILEOFFSETS");if(void 0===l)return null;const p=Pe(a,"TILEBYTECOUNTS"),{minRow:m,minCol:u,maxRow:c,maxCol:h}=i[o];if(t>c||s>h||t<m||s<u)return null;const d=Me(a,"IMAGEWIDTH"),f=Me(a,"IMAGELENGTH"),y=Me(a,"TILEWIDTH"),g=Me(a,"TILELENGTH"),x=n?this.rasterInfo.bandCount:1,j=x*t*(h+1)+s,b=[{from:l[j],to:l[j+x-1]+p[j+x-1]-1}];if(n){let e=!0;for(let t=0;t<x;t++)if(l[j+t]+p[j+t]!==l[j+t+1]){e=!1;break}if(!e)for(let e=0;e<x;e++)b[e]={from:l[j+e],to:l[j+e]+p[j+e]-1}}const I=l[j],w=p[j];if(null==I||null==w)return null;return{ranges:b,ifd:a,actualTileWidth:s===h?d%y:y,actualTileHeight:t===c?f%g:g}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return be(t)}catch{return null}}};e([h()],_e.prototype,"_files",void 0),e([h()],_e.prototype,"_headerInfo",void 0),e([h()],_e.prototype,"_bufferSize",void 0),e([h({type:String,json:{write:!0}})],_e.prototype,"datasetFormat",void 0),_e=e([g("esri.layers.support.rasterDatasets.TIFFRaster")],_e);const Fe=_e,Oe=new Map;Oe.set("CRF",{desc:"Cloud Raster Format",constructor:de}),Oe.set("MRF",{desc:"Meta Raster Format",constructor:Ce}),Oe.set("TIFF",{desc:"GeoTIFF",constructor:Fe}),Oe.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Se}),Oe.set("JPG",{desc:"JPG Raster Format",constructor:we}),Oe.set("PNG",{desc:"PNG Raster Format",constructor:we}),Oe.set("GIF",{desc:"GIF Raster Format",constructor:we}),Oe.set("BMP",{desc:"BMP Raster Format",constructor:we});let De=class extends(j(F(P(M(b(C(O(_(p(x)))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=a(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(c).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var e,t;let s=[new L({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const r=null==(e=this.rasterInfo)||null==(t=e.attributeTable)?void 0:t.fields;if(r){const e=r.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));s=s.concat(e)}const i=this.rasterInfo.dataType;if(("vector-magdir"===i||"vector-uv"===i)&&a(this.rasterInfo.multidimensionalInfo)){var o;const e=null==(o=this.rasterInfo.multidimensionalInfo.variables[0].unit)?void 0:o.trim(),t="Magnitude"+(e?` (${e})`:"");s.push(new L({name:"Raster.Magnitude",alias:t,domain:null,editable:!1,type:"double"})),s.push(new L({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return s}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,r){const i=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,o=s(i,r)||void 0;if(null!=o)return o}createPopupTemplate(e){return ue({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:s}=this;if(this.loaded?"RasterTileServer"===s.datasetFormat&&("Raster"===s.tileType||"Map"===s.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new o("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const e=new Set;return Oe.forEach(((t,s)=>e.add(s))),e}static async open(e){const{url:t,ioConfig:s,sourceJSON:r}=e;let i=e.datasetFormat;null==i&&t.lastIndexOf(".")&&(i=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===i||"TIF"===i?i="TIFF":"JPG"!==i&&"JPEG"!==i&&"JFIF"!==i||(i="JPG"),t.toLowerCase().indexOf("/imageserver")>-1&&-1===t.toLowerCase().indexOf("/wcsserver")&&(i="RasterTileServer");const a={url:t,sourceJSON:r,datasetFormat:i,ioConfig:s||{bandIds:null,sampling:null}};let n,l;if(this.supportedFormats.has(i))return n=Oe.get(i).constructor,l=new n(a),await l.open({signal:e.signal}),l;if(i)throw new o("rasterfactory:open","not a supported format "+i);const p=Array.from(Oe.keys());let m=0;const u=function(){return i=p[m++],i?(n=Oe.get(i).constructor,l=new n(a),l.open({signal:e.signal}).then((()=>l)).catch((()=>u()))):null};return u()}static register(e,t,s){Oe.has(e.toUpperCase())||Oe.set(e.toUpperCase(),{desc:t,constructor:s})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new o("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",(e=>this.raster.ioConfig.customFetchParameters=e))}};e([h({type:[d],json:{write:{overridePolicy(){var e;return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==(null==(e=this.bandIds)?void 0:e.join(","))}}}}})],De.prototype,"bandIds",void 0),e([h({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),f(E)],De.prototype,"interpolation",void 0),e([h({json:{write:!0}})],De.prototype,"multidimensionalDefinition",void 0),e([h(D)],De.prototype,"legendEnabled",void 0),e([h({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],De.prototype,"isReference",void 0),e([h({type:["show","hide"]})],De.prototype,"listMode",void 0),e([h()],De.prototype,"sourceJSON",void 0),e([h({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],De.prototype,"version",void 0),e([h()],De.prototype,"title",void 0),e([h({readOnly:!0,json:{read:!1}})],De.prototype,"type",void 0),e([h({type:["ArcGISTiledImageServiceLayer"]})],De.prototype,"operationalLayerType",void 0),e([h({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,s){t[s]=!e}}}})],De.prototype,"popupEnabled",void 0),e([h({type:t,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],De.prototype,"popupTemplate",void 0),e([h({readOnly:!0})],De.prototype,"defaultPopupTemplate",null),e([h({readOnly:!0,type:[L]})],De.prototype,"fields",void 0),e([h({readOnly:!0,type:[L]})],De.prototype,"rasterFields",null),e([h({types:r,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var e;const t="raster-stretch"===(null==(e=this.renderer)?void 0:e.type)&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!t}}},origins:{"web-scene":{types:i,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],De.prototype,"renderer",null),e([y("renderer")],De.prototype,"readRenderer",null),De=e([g("esri.layers.ImageryTileLayer")],De);const Le=De;export{Le as default};
