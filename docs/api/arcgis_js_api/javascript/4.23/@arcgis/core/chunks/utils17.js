/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{J as t}from"./jsonMap.js";import{b as e,i as r}from"../core/lang.js";import{v as i}from"./unitUtils.js";import{e as n}from"./extentUtils.js";import{fromJSON as s}from"../geometry/support/jsonUtils.js";import{normalizeCentralMeridian as o}from"../geometry/support/normalizeUtils.js";import{m as l,i as a,W as u}from"../geometry/SpatialReference.js";import{q as f,f as c,g as m,r as p,h as g,i as y,j as d}from"./featureConversionUtils.js";import{O as h}from"./OptimizedFeature.js";import{c as S,p as N}from"./projectionSupport.js";function R(t,e){if(!t)return null;const r=e.featureAdapter,{startTimeField:i,endTimeField:n}=t;let s=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY;if(i&&n)e.forEach((t=>{const e=r.getAttribute(t,i),l=r.getAttribute(t,n);null==e||isNaN(e)||(s=Math.min(s,e)),null==l||isNaN(l)||(o=Math.max(o,l))}));else{const t=i||n;e.forEach((e=>{const i=r.getAttribute(e,t);null==i||isNaN(i)||(s=Math.min(s,i),o=Math.max(o,i))}))}return{start:s,end:o}}function b(t,e,r){if(!e||!t)return null;const{startTimeField:i,endTimeField:n}=t;if(!i&&!n)return null;const{start:s,end:o}=e;return null===s&&null===o?null:void 0===s&&void 0===o?()=>!1:i&&n?function(t,e,r,i,n){if(null!=i&&null!=n)return s=>{const o=t.getAttribute(s,e),l=t.getAttribute(s,r);return(null==o||o<=n)&&(null==l||l>=i)};if(null!=i)return e=>{const n=t.getAttribute(e,r);return null==n||n>=i};if(null!=n)return r=>{const i=t.getAttribute(r,e);return null==i||i<=n};return}(r,i,n,s,o):function(t,e,r,i){if(null!=r&&null!=i&&r===i)return i=>t.getAttribute(i,e)===r;if(null!=r&&null!=i)return n=>{const s=t.getAttribute(n,e);return s>=r&&s<=i};if(null!=r)return i=>t.getAttribute(i,e)>=r;if(null!=i)return r=>t.getAttribute(r,e)<=i;return}(r,i||n,s,o)}const j=new t({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"}),w=Object.freeze({}),F=new h,A=new h,M=new h,U={esriGeometryPoint:c,esriGeometryPolyline:g,esriGeometryPolygon:y,esriGeometryMultipoint:d};function I(t,r,i,n=t.hasZ,s=t.hasM){if(e(r))return null;const o=t.hasZ&&n,l=t.hasM&&s;if(i){const e=f(M,r,t.hasZ,t.hasM,"esriGeometryPoint",i,n,s);return c(e,o,l)}return c(r,o,l)}function O(t,i,n,s,o,l,a=i,u=n){const c=i&&a,g=n&&u,y=r(s)?"coords"in s?s:s.geometry:null;if(e(y))return null;if(o){let e=m(A,y,i,n,t,o,a,u);return l&&(e=f(M,e,c,g,t,l)),U[t](e,c,g)}if(l){const e=f(M,y,i,n,t,l,a,u);return U[t](e,c,g)}return p(F,y,i,n,a,u),U[t](F,c,g)}async function _(t,e,r){const{outFields:i,orderByFields:n,groupByFieldsForStatistics:s,outStatistics:o}=t;if(i)for(let t=0;t<i.length;t++)i[t]=i[t].trim();if(n)for(let t=0;t<n.length;t++)n[t]=n[t].trim();if(s)for(let t=0;t<s.length;t++)s[t]=s[t].trim();if(o)for(let t=0;t<o.length;t++)o[t].onStatisticField&&(o[t].onStatisticField=o[t].onStatisticField.trim());return t.geometry&&!t.outSR&&(t.outSR=t.geometry.spatialReference),T(t,e,r)}async function T(t,r,f){if(!t)return null;let{where:c}=t;if(t.where=c=c&&c.trim(),(!c||/^1 *= *1$/.test(c)||r&&r===c)&&(t.where=null),!t.geometry)return t;let m=await async function(t){const{geometry:e,distance:r,units:n}=t;if(null==r||"vertexAttributes"in e)return e;const s=e.spatialReference,o=n?j.fromJSON(n):i(s),f=s&&(l(s)||a(s))?e:await S(s,u).then((()=>N(e,u)));return(await async function(){return(await import("./geometryEngineJSON.js").then((t=>t.g))).geodesicBuffer}())(f.spatialReference,f,r,o)}(t);if(t.distance=0,t.units=null,"esriSpatialRelEnvelopeIntersects"===t.spatialRel){const{spatialReference:e}=t.geometry;m=n(m),m.spatialReference=e}t.geometry=m,await S(m.spatialReference,f);const p=(await o(s(m)))[0];if(e(p))throw w;const g=p.toJSON(),y=await N(g,g.spatialReference,f);if(!y)throw w;return y.spatialReference=f,t.geometry=y,t}function v(t){return t&&E in t?JSON.parse(JSON.stringify(t,G)):t}const E="_geVersion",G=(t,e)=>t!==E?e:void 0;export{w as Q,O as a,R as b,v as c,T as d,b as g,_ as n,I as t};
