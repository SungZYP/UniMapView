/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../Graphic.js";import{F as r,clone as i,e as a,b as o,x as s,i as n,u as l}from"../core/lang.js";import{E as p}from"./Evented.js";import{HandleOwnerMixin as c}from"../core/HandleOwner.js";import{m as h}from"./handleUtils.js";import{property as u}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import{subclass as d}from"../core/accessorSupport/decorators/subclass.js";import y from"../layers/GraphicsLayer.js";import"../geometry.js";import{g as m}from"./unitUtils.js";import g from"../geometry/Circle.js";import{simplify as f,distance as x}from"../geometry/geometryEngine.js";import v,{u as w,i as O,j as M}from"../geometry/Polygon.js";import{j as _}from"../geometry/SpatialReference.js";import{m as V,c as b}from"./surfaceCoordinateSystems.js";import G from"../geometry/Multipoint.js";import j from"../geometry/Polyline.js";import R from"../geometry/Point.js";import{I as T}from"./InteractiveToolBase.js";function C(e,t){const r=new R({x:e[0],y:e[1],spatialReference:t});return e.length>2&&(r.z=e[2]),r}function U(e,t,r){const i=new j({paths:e,spatialReference:t});return r&&w(i),i}function S(e,t,r,o=!0){const s=i(e);s.forEach((e=>{const t=e[0],r=e[e.length-1];a(t,r)&&1!==e.length||e.push(e[0])}));let n=new v({rings:s,spatialReference:t});return n.rings.forEach((e=>{O(e,!1,!1)||e.reverse()})),r&&w(n),o&&n.isSelfIntersecting&&_(t)&&(n=f(n)),n}function z(e,t,i){const a=t.mapToLocalMultiple(e),o=[],s={x:a[0].x,y:a[0].y},n=a[1].x,l=a[1].y,p=Math.round(n-s.x),c=Math.round(l-s.y),h=Math.max(Math.abs(p),Math.abs(c));if(i){const e={x:s.x+h,y:s.y+h},t={x:s.x-h,y:s.y-h};o.push(V(e.x,t.y),V(t.x,t.y),V(t.x,e.y),V(e.x,e.y))}else{const e={x:p>0?s.x+h:s.x-h,y:c>0?s.y+h:s.y-h};o.push(V(s.x,s.y),V(e.x,s.y),V(e.x,e.y),V(s.x,e.y))}return S([r(o.map((e=>t.localToMap(e))))],t.spatialReference,t.doUnnormalization,!0)}function L(e,t,r,i){const a=t.mapToLocalMultiple(e);let s=null,n=null;if(r)s=a[0],n=a[1];else{const e=a[0],t=a[1],r=Math.round(t.x-e.x),i=Math.round(t.y-e.y),o=Math.max(Math.abs(r),Math.abs(i));s=V(r>0?e.x+o/2:e.x-o/2,i>0?e.y+o/2:e.y-o/2),n=V(Math.abs(r)>Math.abs(i)?s.x-o/2:s.x,Math.abs(r)>Math.abs(i)?s.y:s.y-o/2)}const l=t.localToMap(s),p=t.localToMap(n);if(o(l)||o(p))return null;t.doUnnormalization&&M([[l,p]],t.spatialReference);const c=C(l,t.spatialReference),h=C(p,t.spatialReference),u=m(t.spatialReference);let d=0;if(_(t.spatialReference))d=u*x(c,h,null);else{const e=s.x-n.x,t=s.y-n.y;d=u*Math.sqrt(e*e+t*t)*(i||1)}const y=new g({center:c,radius:d,radiusUnit:"meters",spatialReference:t.spatialReference});return S(y.rings,y.spatialReference,!1)}let k=class extends(c(p.EventedMixin(T))){constructor(e){super(e),this._graphic=null,this.defaultZ=0,this.geometryType=null,this.hasZ=!0,this.mode=null,this.snappingManager=null,this.snapToScene=!1}initialize(){this.internalGraphicsLayer=new y({listMode:"hide",internal:!0}),this.view.map.layers.add(this.internalGraphicsLayer),this.drawOperation=this.makeDrawOperation(),this.handles.add([this.drawOperation.on("vertex-add",(e=>this.onVertexAdd(e))),this.drawOperation.on("vertex-remove",(e=>this.onVertexRemove(e))),this.drawOperation.on("vertex-update",(e=>this.onVertexUpdate(e))),this.drawOperation.on("cursor-update",(e=>this.onCursorUpdate(e))),this.drawOperation.on("complete",(e=>this.onComplete(e)))]),this.finishToolCreation()}destroy(){this.drawOperation=s(this.drawOperation),this._destroyAllVisualisations(),this.view.map.remove(this.internalGraphicsLayer),this.internalGraphicsLayer=s(this.internalGraphicsLayer),this._set("view",null)}get canRedo(){return this.drawOperation.canRedo}get canUndo(){return this.drawOperation.canUndo}set centered(e){this._set("centered",e),this._updateGraphic()}set enabled(e){this.drawOperation.interactive=e,this._set("enabled",e)}set forceUniformSize(e){this._set("forceUniformSize",e),this._updateGraphic()}get graphic(){return this._graphic}set graphicSymbol(e){this._set("graphicSymbol",e),n(this._graphic)&&(this._graphic.symbol=e)}get updating(){var e,t;return null!=(e=null==(t=this.drawOperation)?void 0:t.updating)&&e}completeCreateOperation(){this.drawOperation.complete()}onInputEvent(e){this.drawOperation.onInputEvent(e)}redo(){this.drawOperation.redo()}reset(){}undo(){this.drawOperation.undo()}_createGraphic(e){this._graphic=new t({...this.graphicProperties,geometry:e,symbol:this.graphicSymbol}),this.internalGraphicsLayer.add(this._graphic),this.handles.add(this.initializeGraphic(this._graphic)),this.notifyChange("graphic"),this.handles.add(h((()=>{n(this._graphic)&&(this.internalGraphicsLayer.remove(this._graphic),this._graphic=s(this._graphic))})),P)}_destroyAllVisualisations(){this.handles.remove(A.outline),this.handles.remove(A.regularVertices),this.handles.remove(A.activeVertex),this.handles.remove(P)}_getCreateOperationGeometry(e={operationComplete:!1}){if(null==this.drawOperation||0===this.drawOperation.numVertices)return null;const t=this.drawOperation.stagedVertex,i=this.drawOperation.committedVertices,a=i.slice();n(t)&&a.push(this.drawOperation.coordinateHelper.pointToArray(t));const o=n(t)?this.drawOperation.coordinateHelper.pointToArray(t):i.splice(-1)[0],s={regularVertices:null,activeVertex:null,full:null,outline:null},l=a.length,p=this.drawOperation.spatialReference,c="3d"===this.view.type&&"global"===this.view.viewingMode;switch(this.geometryType){case"point":s.regularVertices=i,s.activeVertex=o,s.full=this.drawOperation.coordinateHelper.arrayToPoint(a[0]);break;case"multipoint":s.regularVertices=i,s.activeVertex=o,l>0&&(s.full=function(e,t){return new G({points:e,spatialReference:t})}(a,p));break;case"polyline":s.regularVertices=i,s.activeVertex=o,l>0&&(s.full=U([a],p,c));break;case"polygon":s.regularVertices=i,s.activeVertex=o,l>0&&(s.full=S([a],p,c,!0));break;case"circle":if(l>0){const t=b(this.view,a[0]);if(1===l&&e.operationComplete){const e=a[0],r=t.makeMapPoint(e[0]+I*this.view.resolution,e[1]);s.full=L([e,r],t,!0)}else 2===l&&(s.full=this.forceUniformSize?L(a,t,this.centered):function(e,t,i){const a=t.mapToLocalMultiple(e),o=a[0],s=a[1],n=Math.round(s.x-o.x),l=Math.round(s.y-o.y),p=V(i?o.x:o.x+n/2,i?o.y:o.y+l/2),c=i?n:n/2,h=i?l:l/2,u=[],d=2*Math.PI/60;for(let e=0;e<60;e++){const t=Math.cos(e*d),r=Math.sin(e*d),i=V(c*t+p.x,h*r+p.y);u.push(i)}return u.push(u[0]),S([r(u.map((e=>t.localToMap(e))))],t.spatialReference,t.doUnnormalization,!1)}(a,t,this.centered))}break;case"rectangle":if(l>0){const t=b(this.view,a[0]);if(1===l&&e.operationComplete){const e=a[0],r=t.makeMapPoint(e[0]+I*this.view.resolution,e[1]);s.full=z([e,r],t,!0)}else 2===l&&(s.full=this.forceUniformSize?z(a,t,this.centered):function(e,t,i){let a=t.mapToLocalMultiple(e);if(1===a.length){const e=48,t=a[0];a=[V(t.x-e,t.y+e),V(t.x+e,t.y-e),V(t.x+e,t.y-e),V(t.x-e,t.y+e)]}const o=[],s={x:a[0].x,y:a[0].y},n={x:a[1].x,y:a[1].y};if(i){const e=Math.round(n.x-s.x),t=Math.round(n.y-s.y);o.push(V(s.x-e,s.y-t),V(n.x,s.y-t),V(n.x,n.y),V(s.x-e,n.y))}else o.push(V(s.x,s.y),V(n.x,s.y),V(n.x,n.y),V(s.x,n.y));return S([r(o.map((e=>t.localToMap(e))))],t.spatialReference,t.doUnnormalization,!0)}(a,t,this.centered))}break;default:return null}switch(this.geometryType){case"point":case"multipoint":break;case"polyline":case"polygon":l>1&&(s.outline=U([a],p,c));break;case"circle":case"rectangle":n(s.full)&&"polygon"===s.full.type&&(s.outline=S(s.full.rings,p,c))}return s}initializeGraphic(e){return null}onComplete(e){this._updateGraphic();let t=null;if(this.drawOperation.isCompleted){const e=this._getCreateOperationGeometry({operationComplete:!0});n(e)&&(o(this._graphic)?this._createGraphic(e.full):this._graphic.geometry=e.full,t=l(this._graphic).clone())}this.emit("complete",{graphic:t,...e})}onCursorUpdate(e){this._updateGraphic(),this.emit("cursor-update",e)}onDeactivate(){this.drawOperation.isCompleted||this.drawOperation.cancel()}onVertexAdd(e){this._updateGraphic(),this.emit("vertex-add",e)}onVertexRemove(e){this._updateGraphic(),this.emit("vertex-remove",e)}onVertexUpdate(e){this._updateGraphic(),this.emit("vertex-update",e)}_updateGraphic(){const e=this._getCreateOperationGeometry();o(e)?this._destroyAllVisualisations():(n(e.outline)?this.handles.add(this.onOutlineChanged(e.outline),A.outline):this.handles.remove(A.outline),n(e.regularVertices)?this.handles.add(this.onRegularVerticesChanged(e.regularVertices),A.regularVertices):this.handles.remove(A.regularVertices),n(e.activeVertex)?this.handles.add(this.onActiveVertexChanged(e.activeVertex),A.activeVertex):this.handles.remove(A.activeVertex),n(e.full)?o(this._graphic)?this._createGraphic(e.full):this._graphic.geometry=e.full:this.handles.remove(P))}};e([u({value:!0})],k.prototype,"centered",null),e([u({nonNullable:!0})],k.prototype,"defaultZ",void 0),e([u()],k.prototype,"drawOperation",void 0),e([u({value:!0})],k.prototype,"enabled",null),e([u({value:!0})],k.prototype,"forceUniformSize",null),e([u({constructOnly:!0})],k.prototype,"geometryType",void 0),e([u()],k.prototype,"graphic",null),e([u({constructOnly:!0})],k.prototype,"graphicProperties",void 0),e([u()],k.prototype,"graphicSymbol",null),e([u({constructOnly:!0})],k.prototype,"hasZ",void 0),e([u({constructOnly:!0})],k.prototype,"mode",void 0),e([u()],k.prototype,"snappingManager",void 0),e([u()],k.prototype,"snapToScene",void 0),e([u({readOnly:!0})],k.prototype,"type",void 0),e([u({readOnly:!0})],k.prototype,"updating",null),e([u({constructOnly:!0,nonNullable:!0})],k.prototype,"view",void 0),k=e([d("esri.views.draw.DrawGraphicTool")],k);const P="create-operation-graphic",A={outline:"outline-visual",regularVertices:"regular-vertices-visual",activeVertex:"active-vertex-visual"};function E(e){switch(e){case"point":case"polyline":case"polygon":case"multipoint":return e;case"circle":case"rectangle":return"segment";default:return null}}const I=48;export{k as D,E as g};
