// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.23/esri/copyright.txt for details.
//>>built
define("exports ../../../core/Handles ../../../core/mathUtils ../../../core/maybe ../../../core/watchUtils ../../../chunks/mat4 ../../../chunks/mat4f64 ../../../chunks/vec2 ../../../chunks/vec2f64 ../../../chunks/vec3 ../../../chunks/vec3f64 ../../../chunks/vec4f64 ../../../geometry/support/Ellipsoid ./atmosphereUtils ./ChapmanAtmosphereTechnique ../webgl-engine/lib/DefaultVertexBufferLayouts ../webgl-engine/lib/glUtil3D ../../webgl/enums".split(" "),function(p,y,q,d,r,t,u,v,w,h,k,x,g,b,l,z,A,B){let C=
function(){function m(a){this._view=a;this.type="realistic";this.canRender=!0;this._cameraPosition=k.create();this._projectionInverse=u.create();this._viewInverse=u.create();this._heightParameters=x.create();this._betasRayleigh=k.create();this._betasCombined=k.create();this._scaleHeight=0;this._radii=w.create();this._nearFar=w.create();this._lowerElevationBoundRadius=this._altitudeFade=this._innerFadeDistance=this._cAtmosphere=this._cameraHeightSq=this._cameraHeight=0;this._lowerBoundEarthRadius=
g.earth.radius;this._hazeStrength=1;this._darkenHaze=!1;this._updateRadius(g.earth.radius)}var c=m.prototype;c.destroy=function(){this._atmosphereTechnique=d.releaseMaybe(this._atmosphereTechnique);this._atmosphereHazeTechnique=d.releaseMaybe(this._atmosphereHazeTechnique);this._vao=d.disposeMaybe(this._vao);this._handles=d.destroyMaybe(this._handles)};c.when=function(){return Promise.resolve()};c.initializeRenderContext=function(a){const e=a.renderContext.rctx;this._handles=new y;d.isSome(this._view.basemapTerrain.rootTiles)&&
this._updateElevation({spatialReference:this._view.basemapTerrain.spatialReference,tile:this._view.basemapTerrain.rootTiles[0],extent:this._view.basemapTerrain.rootTiles[0].extent,context:"ground"});this._handles.add(r.on(this._view,"basemapTerrain","elevation-change",n=>this._updateElevation(n),()=>this._updateElevation()));this._handles.add(r.on(this._view,"basemapTerrain","elevation-bounds-change",()=>this._updateVisibleElevationBounds()));const f=new l.ChapmanAtmosphereTechniqueConfiguration;
f.haze=!1;this._atmosphereTechnique=a.shaderTechniqueRepository.acquire(l.ChapmanAtmosphereTechnique,f);f.haze=!0;this._atmosphereHazeTechnique=a.shaderTechniqueRepository.acquire(l.ChapmanAtmosphereTechnique,f);this._vao=A.createQuadVAO(e,z.Pos2Tex);this._scaleHeight=b.rayLeighScaleHeight*b.atmosphereHeight;h.set(this._betasRayleigh,b.betaRayleigh[0],b.betaRayleigh[1],b.betaRayleigh[2]);h.set(this._betasCombined,b.betaRayleigh[0]+b.betaOzone[0],b.betaRayleigh[1]+b.betaOzone[1],b.betaRayleigh[2]+
b.betaOzone[2])};c.render=function(a){this._render(a,this._atmosphereTechnique,a.offscreenRenderingHelper.depthTexture)};c.renderHaze=function(a,e){this._darkenHaze=e;this._render(a,this._atmosphereHazeTechnique,a.offscreenRenderingHelper.linearDepthTexture)};c._render=function(a,e,f){this._update(a.camera);const n=a.rctx.useTechnique(e);a.offscreenRenderingHelper.renderDepthDetached(()=>{n.bindTexture(f,"depthTex");this._renderCommon(e.program,a)})};c._renderCommon=function(a,e){if(!d.isNone(this._vao)){var f=
e.rctx;e.scenelightingData.setLightDirectionUniform(a);a.setUniform4fv("heightParameters",this._heightParameters);a.setUniform3fv("cameraPosition",this._cameraPosition);a.setUniformMatrix4fv("inverseProjectionMatrix",this._projectionInverse);a.setUniformMatrix4fv("inverseViewMatrix",this._viewInverse);a.setUniform2fv("nearFar",this._nearFar);a.setUniform2fv("radii",this._radii);a.setUniform1f("scaleHeight",this._scaleHeight);a.setUniform1f("betaMie",b.betaMie);a.setUniform3fv("betaRayleigh",this._betasRayleigh);
a.setUniform3fv("betaCombined",this._betasCombined);a.setUniform1f("innerFadeDistance",this._innerFadeDistance);a.setUniform1f("altitudeFade",this._altitudeFade);a.setUniform1f("hazeStrength",this._hazeStrength);f.bindVAO(this._vao);a.assertCompatibleVertexAttributeLocations(this._vao);f.drawArrays(B.PrimitiveType.TRIANGLE_STRIP,0,4)}};c._adjustRadiusForTesselation=function(a){return a*Math.cos(Math.PI/16/16)};c._updateElevation=function(a){a=a?a.tile:d.unwrapOr(this._view.basemapTerrain.rootTiles,
[null])[0];d.isNone(a)||0!==a.level||(a=this._adjustRadiusForTesselation(g.earth.radius+a.elevationBounds[0]),a!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=a,this._lowerBoundEarthRadius=-1,this._updateVisibleElevationBounds()))};c._updateVisibleElevationBounds=function(){const a=this._adjustRadiusForTesselation(g.earth.radius+this._view.basemapTerrain.elevationBounds.min);(0>this._lowerBoundEarthRadius||a<this._lowerBoundEarthRadius)&&this._updateRadius(a)};c._updateRadius=
function(a){this._lowerBoundEarthRadius=a;v.set(this._radii,a,a+b.atmosphereHeight);this._innerFadeDistance=2*Math.sqrt((2*a-b.innerAtmosphereDepth)*b.innerAtmosphereDepth)};c._update=function(a){d.isNone(a)||(this._cameraHeight=h.length(a.eye),this._cameraHeightSq=this._cameraHeight*this._cameraHeight,this._cAtmosphere=this._cameraHeightSq-this._radii[1]*this._radii[1],this._heightParameters=x.fromValues(this._cameraHeight,this._cameraHeightSq,this._cAtmosphere,Math.min(1,Math.max(0,(this._cameraHeight-
this._radii[0])/b.atmosphereHeight))),h.copy(this._cameraPosition,a.eye),t.invert(this._projectionInverse,a.projectionMatrix),t.invert(this._viewInverse,a.viewMatrix),v.set(this._nearFar,a.near,a.far),this._altitudeFade=b.computeInnerAltitudeFade(this._cameraHeight-this._lowerBoundEarthRadius),this._hazeStrength=this._darkenHaze?q.lerp(.6,1,q.smoothstep(9500,10500,this._cameraHeight-g.earth.radius)):1)};m.isSupported=function(a){return a.renderContext.rctx.capabilities.depthTexture};return m}();p.ChapmanAtmosphere=
C;Object.defineProperty(p,"__esModule",{value:!0})});