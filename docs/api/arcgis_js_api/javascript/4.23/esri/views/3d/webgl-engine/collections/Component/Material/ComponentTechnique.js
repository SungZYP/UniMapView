// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.23/esri/copyright.txt for details.
//>>built
define("require exports ../../../../../../chunks/_rollupPluginBabelHelpers ../../../../../../chunks/tslib.es6 ../../../../../../core/maybe ../../../../../../chunks/mat3f64 ../../../../../../chunks/vec4f64 ./shader/ComponentData.glsl ../../../../../../chunks/ComponentShader.glsl ./shader/VertexDiscardByOpacity.glsl ../../../core/renderPasses/AllRenderPasses ../../../core/shaderLibrary/ShaderOutputOptions ../../../core/shaderLibrary/Slice.glsl ../../../core/shaderLibrary/attributes/NormalAttribute.glsl ../../../core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl ../../../core/shaderLibrary/attributes/VertexPosition.glsl ../../../core/shaderLibrary/output/OutputHighlight.glsl ../../../core/shaderLibrary/shading/Normals.glsl ../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl ../../../core/shaderLibrary/shading/ScreenSpaceReflections.glsl ../../../core/shaderLibrary/util/DoublePrecision.glsl ../../../core/shaderLibrary/util/EllipsoidMode ../../../core/shaderTechnique/ReloadableShaderModule ../../../core/shaderTechnique/ShaderTechnique ../../../core/shaderTechnique/ShaderTechniqueConfiguration ../../../lib/basicInterfaces ../../../lib/OrderIndependentTransparency ../../../lib/Program ../../../lib/StencilUtils ../../../../../webgl/renderState".split(" "),
function(I,k,w,h,p,J,K,x,y,D,l,q,L,z,E,A,M,F,r,N,O,G,e,t,g,n,u,P,B,v){t=function(f){function m(){return f.apply(this,arguments)||this}w._inheritsLoose(m,f);var d=m.prototype;d.bindPass=function(a){const c=this.program;A.bindViewProjTransform(c,a.viewTransform);L.bindSliceUniforms(this.program,this.configuration,a.slicePlane);a.identifier===l.RenderPassIdentifier.Material&&(void 0!==a.ssrParams&&N.bindSSRUniforms(this.program,a.ssrParams),c.setUniformMatrix3fv("transformNormalViewFromGlobal",a.transformNormalViewFromGlobal),
a.subPass===l.MaterialSubPass.Depth&&c.setUniform2fv("nearFar",a.nearFar),a.subPass===l.MaterialSubPass.Color&&a.lighting.setUniforms(this.program,a.integratedMesh,a.hasFillLights));a.identifier===l.RenderPassIdentifier.ShadowMap&&this.program.setUniform2fv("nearFar",a.nearFar)};d.bindMaterial=function(a,c){this._material=a;const b=this.program;b.setUniform4fv("baseColor",a.baseColor);b.setUniform1f("objectOpacity",a.objectOpacity);b.setUniform1f("textureAlphaCutoff",a.alphaCutoff);a.componentParameters.type===
x.ComponentDataType.Varying?a.componentParameters.texture.bind(b,"componentColorTex","componentColorTexInvDim"):(b.setUniform4fv("externalColor",a.componentParameters.externalColor),b.setUniform1i("externalColorMixMode",a.componentParameters.externalColorMixMode));p.isSome(a.baseColorTexture)&&a.baseColorTexture.bind(b,"baseColorTexture","baseColorTextureSize");if(this.configuration.output===q.ShaderOutput.Color||this.configuration.output===q.ShaderOutput.Alpha)r.bindPBRUniforms(this.program,a,this.configuration.isSchematic),
p.isSome(a.metallicRoughnessTexture)&&a.metallicRoughnessTexture.bind(b,"texMetallicRoughness","texMetallicRoughnessSize"),p.isSome(a.emissionTexture)&&a.emissionTexture.bind(b,"texEmission","texEmissionSize"),p.isSome(a.occlusionTexture)&&a.occlusionTexture.bind(b,"texOcclusion","texOcclusionSize"),p.isSome(a.normalTexture)&&a.normalTexture.bind(b,"normalTexture","normalTextureSize");a.isIntegratedMesh&&(c.identifier===l.RenderPassIdentifier.Material&&c.subPass===l.MaterialSubPass.Color?(b.bindTexture(a.overlayColor,
"ovColorTex"),b.bindTexture(a.overlayNormal,"ovNormalTex")):c.identifier===l.RenderPassIdentifier.Highlight&&b.bindTexture(a.overlayHighlight,"ovColorTex"),b.setUniform1f("overlayOpacity",1));c.identifier===l.RenderPassIdentifier.Highlight&&M.bindOutputHighlight(this.program,c);c.identifier===l.RenderPassIdentifier.Material&&c.subPass===l.MaterialSubPass.Color&&(c.ambientOcclusionEnabled&&c.bindAmbientOcclusion(b),c.shadowsEnabled&&c.bindShadowMap(b));c.identifier!==l.RenderPassIdentifier.Material||
c.subPass!==l.MaterialSubPass.Color&&c.subPass!==l.MaterialSubPass.Alpha||!c.multipassTerrainParams.multipassTerrainEnabled||(this.program.setUniform2fv("nearFar",c.nearFar),b.setUniform2fv("inverseViewport",c.inverseViewport),c.multipassTerrainParams.terrainLinearDepthTexture&&b.bindTexture(c.multipassTerrainParams.terrainLinearDepthTexture,"terrainDepthTexture"))};d.bindDraw=function(a){A.bindModelTransform(this.program,a);this.program.setUniformMatrix3fv("transformNormalGlobalFromModel",a.transformNormalGlobalFromModel);
this.program.rebindTextures();if(p.isSome(this._material)&&this._material.isIntegratedMesh){const c=this._material.overlayTexScale,b=this._material.overlayTexOffset;this.program.setUniform4fv("overlayTexOffset",[a.toMapSpace[0]*c[0]+b[0],a.toMapSpace[1]*c[1]+b[1],a.toMapSpace[0]*c[2]+b[2],a.toMapSpace[1]*c[3]+b[3]]);this.program.setUniform4fv("overlayTexScale",[a.toMapSpace[2]*c[0],a.toMapSpace[3]*c[1],a.toMapSpace[2]*c[2],a.toMapSpace[3]*c[3]])}};d.initializeProgram=function(a){const c=m.shader.get();
var b=this.configuration;b=c.build({multipassTerrainEnabled:b.multipassTerrainEnabled,cullAboveGround:b.cullAboveGround,oitEnabled:b.transparencyPassType===n.TransparencyPassType.Color,output:b.output,normalType:b.integratedMeshMode===k.IntegratedMeshMode.None?b.hasNormals?z.NormalAttributeType.CompressedAttribute:z.NormalAttributeType.ScreenDerivative:z.NormalAttributeType.Ground,attributeColor:b.hasVertexColors,attributeTextureCoordinates:b.vertexTextureCoordinates,componentData:b.componentData,
alphaDiscardMode:b.alphaDiscardMode,baseColorTexture:b.baseColorTexture,doubleSidedMode:b.doubleSidedMode,receiveAmbientOcclusion:b.receiveAmbientOcclusion,receiveShadows:b.receiveShadows,slicePlaneEnabled:b.slicePlaneEnabled,sliceHighlightDisabled:!1,sliceEnabledForVertexPrograms:!1,viewingMode:a.viewingMode,vertexDiscardMode:b.vertexDiscardMode,pbrMode:b.integratedMeshMode===k.IntegratedMeshMode.ColorOverlayWithWater?r.PBRMode.WaterOnIntegratedMesh:b.usePBR?b.isSchematic?r.PBRMode.Schematic:r.PBRMode.Normal:
r.PBRMode.Disabled,hasMetalnessAndRoughnessTexture:b.hasMetalnessAndRoughnessTexture,hasEmissionTexture:b.hasEmissionTexture,hasOcclusionTexture:b.hasOcclusionTexture,hasNormalTexture:b.hasNormalTexture,vertexTangents:!1,supportsTextureAtlas:!0,doublePrecisionRequiresObfuscation:O.doublePrecisionRequiresObfuscation(a.rctx),overlayEnabled:b.integratedMeshMode===k.IntegratedMeshMode.ColorOverlay||b.integratedMeshMode===k.IntegratedMeshMode.ColorOverlayWithWater,ssrEnabled:b.ssrEnabled,highStepCount:!1,
ellipsoidMode:b.ellipsoidMode});return new P.Program(a.rctx,b,c.attributeLocations)};d._setPipelineState=function(a){const c=this.configuration,b=c.integratedMeshMode!==k.IntegratedMeshMode.None,C=a===n.TransparencyPassType.NONE,H=a===n.TransparencyPassType.FrontFace;return v.makePipelineState({blending:c.output!==q.ShaderOutput.Color&&c.output!==q.ShaderOutput.Alpha||!c.blendingEnabled?null:C?u.blendingDefault:u.oitBlending(a),culling:v.cullingParams(c.cullFace),depthTest:{func:u.oitDepthTest(a)},
depthWrite:C||H?v.defaultDepthWriteParams:null,colorWrite:v.defaultColorWriteParams,stencilWrite:b||c.sceneHasOcludees?B.stencilWriteMaskOn:null,stencilTest:b?B.replaceBitWhenDepthTestPasses(n.StencilBits.IntegratedMeshMaskExcluded):c.sceneHasOcludees?B.stencilBaseAllZerosParams:null,polygonOffset:C||H?c.polygonOffsetEnabled?{factor:2,units:2}:null:u.OITPolygonOffset})};d.initializePipeline=function(){return this._setPipelineState(this.configuration.transparencyPassType)};return m}(t.ShaderTechnique);
t.shader=new e.ReloadableShaderModule(y.ComponentShader,()=>new Promise((f,m)=>I(["./shader/ComponentShader.glsl"],f,m)));y=function(f){function m(){var d=f.apply(this,arguments)||this;d.transformNormalGlobalFromModel=J.create();d.toMapSpace=K.create();return d}w._inheritsLoose(m,f);return m}(A.VertexPositionModelTransform);k.PassDiscardMode=void 0;(function(f){f[f.None=0]="None";f[f.Transparent=1]="Transparent";f[f.Opaque=2]="Opaque";f[f.COUNT=3]="COUNT"})(k.PassDiscardMode||(k.PassDiscardMode={}));
k.IntegratedMeshMode=void 0;(function(f){f[f.None=0]="None";f[f.NoOverlay=1]="NoOverlay";f[f.ColorOverlay=2]="ColorOverlay";f[f.ColorOverlayWithWater=3]="ColorOverlayWithWater";f[f.COUNT=4]="COUNT"})(k.IntegratedMeshMode||(k.IntegratedMeshMode={}));e=function(f){function m(){var d=f.apply(this,arguments)||this;d.output=q.ShaderOutput.Color;d.hasVertexColors=!1;d.hasNormals=!1;d.vertexTextureCoordinates=E.TextureCoordinateAttributeType.None;d.componentData=x.ComponentDataType.Uniform;d.slicePlaneEnabled=
!1;d.cullFace=n.CullFaceOptions.Back;d.baseColorTexture=!1;d.receiveAmbientOcclusion=!0;d.receiveShadows=!0;d.vertexDiscardMode=D.VertexDiscardMode.None;d.doubleSidedMode=F.NormalsDoubleSidedMode.WindingOrder;d.blendingEnabled=!0;d.alphaDiscardMode=n.AlphaDiscardMode.Opaque;d.integratedMeshMode=k.IntegratedMeshMode.None;d.ssrEnabled=!1;d.polygonOffsetEnabled=!1;d.usePBR=!1;d.isSchematic=!1;d.hasMetalnessAndRoughnessTexture=!1;d.hasEmissionTexture=!1;d.hasOcclusionTexture=!1;d.hasNormalTexture=!1;
d.sceneHasOcludees=!1;d.transparencyPassType=n.TransparencyPassType.NONE;d.ellipsoidMode=G.EllipsoidMode.Earth;d.multipassTerrainEnabled=!1;d.cullAboveGround=!1;return d}w._inheritsLoose(m,f);return m}(g.ShaderTechniqueConfiguration);h.__decorate([g.parameter({count:q.ShaderOutput.COUNT})],e.prototype,"output",void 0);h.__decorate([g.parameter()],e.prototype,"hasVertexColors",void 0);h.__decorate([g.parameter()],e.prototype,"hasNormals",void 0);h.__decorate([g.parameter({count:E.TextureCoordinateAttributeType.COUNT})],
e.prototype,"vertexTextureCoordinates",void 0);h.__decorate([g.parameter({count:x.ComponentDataType.COUNT})],e.prototype,"componentData",void 0);h.__decorate([g.parameter()],e.prototype,"slicePlaneEnabled",void 0);h.__decorate([g.parameter({count:n.CullFaceOptions.COUNT})],e.prototype,"cullFace",void 0);h.__decorate([g.parameter()],e.prototype,"baseColorTexture",void 0);h.__decorate([g.parameter()],e.prototype,"receiveAmbientOcclusion",void 0);h.__decorate([g.parameter()],e.prototype,"receiveShadows",
void 0);h.__decorate([g.parameter({count:D.VertexDiscardMode.COUNT})],e.prototype,"vertexDiscardMode",void 0);h.__decorate([g.parameter({count:F.NormalsDoubleSidedMode.COUNT})],e.prototype,"doubleSidedMode",void 0);h.__decorate([g.parameter()],e.prototype,"blendingEnabled",void 0);h.__decorate([g.parameter({count:n.AlphaDiscardMode.COUNT})],e.prototype,"alphaDiscardMode",void 0);h.__decorate([g.parameter({count:k.IntegratedMeshMode.COUNT})],e.prototype,"integratedMeshMode",void 0);h.__decorate([g.parameter()],
e.prototype,"ssrEnabled",void 0);h.__decorate([g.parameter()],e.prototype,"polygonOffsetEnabled",void 0);h.__decorate([g.parameter()],e.prototype,"usePBR",void 0);h.__decorate([g.parameter()],e.prototype,"isSchematic",void 0);h.__decorate([g.parameter()],e.prototype,"hasMetalnessAndRoughnessTexture",void 0);h.__decorate([g.parameter()],e.prototype,"hasEmissionTexture",void 0);h.__decorate([g.parameter()],e.prototype,"hasOcclusionTexture",void 0);h.__decorate([g.parameter()],e.prototype,"hasNormalTexture",
void 0);h.__decorate([g.parameter()],e.prototype,"sceneHasOcludees",void 0);h.__decorate([g.parameter({count:n.TransparencyPassType.COUNT})],e.prototype,"transparencyPassType",void 0);h.__decorate([g.parameter({count:G.EllipsoidMode.COUNT})],e.prototype,"ellipsoidMode",void 0);h.__decorate([g.parameter()],e.prototype,"multipassTerrainEnabled",void 0);h.__decorate([g.parameter()],e.prototype,"cullAboveGround",void 0);k.ComponentDrawParameters=y;k.ComponentTechnique=t;k.ComponentTechniqueConfiguration=
e;Object.defineProperty(k,"__esModule",{value:!0})});